openapi: 3.0.0
info:
  title: WASAPhoto
  version: "0.1.0"
  contact:
    name: Alessio Bandiera
    email: bandiera.1985878@studenti.uniroma1.it
    url: https://github.com/ph04
  license:
    name: TODO
  description: |-
    Each user will be presented with a stream of photos in reverse chronological order, with information
    about when it was uploaded (date and time) and how many likes and comments it has. 
    
    Users can place
    (and later remove) a “like” to photos from other users. Also, users can add comments to any photo
    (even those uploaded by themself). Comments can be removed by the author only. Users can ban other users.
    If Alice (user) bans Eve (user), Eve won’t be able tosee any information about Alice. Alice can decide to
    remove the ban at any moment.
    
    Users will have their own personal profiles. The personal profile page for
    user detail contains user’s photos (in reverse chronological order), their followers and following, and how many
    photos have been uploaded. Each user can change his/her own username, upload photos,
    remove photos, and follow/unfollow other users. Removal of a photo will also remove likes and comments.

tags:
  - name : "Login"
    description: "Endpoints for the user login"
  - name: "Ban"
    description: "Endpoints for banning users"
  - name: "Follow"
    description: "Endpoints for folllowing users"

paths:
  /session:
    post:
      tags: ["Login"]
      summary: Logs in the user
      description: |-
        If the user does not exist, it will be created,
        and an identifier is returned.
        If the user exists, the user identifier is returned.
      operationId: doLogin
      requestBody:
        description: User details
        required: true
        content:
          application/json:
            schema: { $ref: "#/components/schemas/user" }
      responses:
        '201':
          description: User log-in action successful
          content: # TODO WHAT IS THIS???
            application/json:
              schema:
                type: object
                properties:
                  identifier:
                    type: string
                    example: "abcdef012345"
  
  # /user/{uid}/ban:
  
  /user/{uid}/ban/{bannedid}:
    parameters:
      - { $ref: "#/components/parameters/uid" }
      - { $ref: "#/components/parameters/bannedid" }
    
    put:
      security:
        - bearerAuth: []
      tags: ["Ban"]
      summary: Ban a user
      description: |-
        TODO
      operationId: banUser
      responses:
        "200":
          description: User banned successfully
          content:
            application/json:
              schema: { $ref: "#/components/schemas/user" }
        # TODO OTHER RESPONSES
      
    delete:
      security:
        - bearerAuth: []
      tags: ["Ban"]
      summary: Unban a user
      description: |-
        TODO
      operationId: unbanUser
      responses:
        "200":
          description: User unbanned successfully
          content:
            application/json:
              schema: { $ref: "#/components/schemas/user" }
        "400": { $ref: "#/components/responses/BadRequest" }
        "401": { $ref: "#/components/responses/Unauthorized" }
        "500": { $ref: "#/components/responses/InternalServerError" }
  
  /user/{uid}/follow/{followid}:
    parameters:
      - { $ref: "#/components/parameters/uid" }
      - { $ref: "#/components/parameters/followid" }
      
    put:
      security:
        - bearerAuth: []
      tags: ["Follow"]
      summary: Follow a user  
      description: |-
        TODO
      operationId: followUser
      responses:
        "200":
          description: User followed successfully
          content:
            application/json:
              schema: { $ref: "#/components/schemas/user" }
      # TODO OTHER RESPONSES
      
    delete:
      security:
        - bearerAuth: []
      tags: ["Follow"]
      summary: Unnfollow a user
      description: |-
        TODO
      operationId: unfollowUser
      responses:
        "200":
          description: User unfollowed successfully
          content:
            application/json:
              schema: { $ref: "#/components/schemas/user" }
  
  /user/{uid}/upload:
    parameters:
      - { $ref: "#/components/parameters/uid" }
    
    post:
      security:
        - bearerAuth: []
      tags: ["Photos"]
      summary: Upload a photo
      description: |-
        TODO
      operationId: uploadPhoto
      requestBody:
        description: The photo to be uploaded
        required: true
        content:
          application/json:
            schema: { $ref: "#/components/schemas/photo" }
      responses:
        "200":
          description: Photo uploaded successfully
          content:
            application/json:
              schema: { $ref: "#/components/schemas/user" }
              
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
  schemas:
    user:
      title: User
      description: The component that represents a user
      type: object
      properties:
        name:
          type: string
          example: Maria
          pattern: 'ˆ.*?$'
          minLength: 3
          maxLength: 16
    photo:
      title: Photo
      description: The component that represents a photo
      type: object
      properties:
        TODO: # TODO NON CAPISCO DOVE ANDARE A PRENDERE QUESTI BOH
          TODO: todo
  parameters:
    uid:
      name: uid
      in: path
      description: The parameter that represents the user performing the operation
      required: true
      schema:
        $ref: "#/components/schemas/user"
    bannedid:
      name: bannedid
      in: path
      description: The parameter that represents the banned user
      required: true
      schema:
        $ref: "#/components/schemas/user"
    followid:
      name: followid
      in: path
      description: The parameter that represents the user to be followed
      required: true
      schema:
        $ref: "#/components/schemas/user"
  responses:
    BadRequest:
      description: TODO
    Unauthorized:
      description: TODO
    InternalServerError:
      description: TODO
