openapi: 3.0.0
info:
  title: WASAPhoto
  version: "0.1.0"
  contact:
    name: Alessio Bandiera
    email: bandiera.1985878@studenti.uniroma1.it
    url: https://github.com/ph04
  license:
    name: TODO
  description: |-
    Each user will be presented with a stream of photos in reverse chronological order, with information
    about when it was uploaded (date and time) and how many likes and comments it has. 
    
    Users can place
    (and later remove) a “like” to photos from other users. Also, users can add comments to any photo
    (even those uploaded by themself). Comments can be removed by the author only. Users can ban other users.
    If Alice (user) bans Eve (user), Eve won’t be able tosee any information about Alice. Alice can decide to
    remove the ban at any moment.
    
    Users will have their own personal profiles. The personal profile page for
    user detail contains user’s photos (in reverse chronological order), their followers and following, and how many
    photos have been uploaded. Each user can change his/her own username, upload photos,
    remove photos, and follow/unfollow other users. Removal of a photo will also remove likes and comments.
tags:
  - name : "Login"
    description: "Endpoints for the user login"
  - name: "Ban"
    description: "Endpoints for banning users"
paths:
  /session:
    post:
      tags: ["Login"]
      summary: Logs in the user
      description: |-
        If the user does not exist, it will be created,
        and an identifier is returned.
        If the user exists, the user identifier is returned.
      operationId: doLogin
      requestBody:
        description: User details
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  example: Maria
                  pattern: 'ˆ.*?$'
                  minLength: 3
                  maxLength: 16
      responses:
        '201':
          description: User log-in action successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  identifier:
                    type: string
                    example: "abcdef012345"
  # /user/{uid}/ban:
  /user/{uid}/ban/{bannedid}:
    delete:
      tags: ["Ban"]
      summary: Remove the ban from a user
      description: |-
        TODO
      operationId: unbanUser
      parameters:
        - name: uid
          in: path
          description: User ID who does the ban
          required: true
          schema:
            $ref: "#/components/schemas/User"
        - name: bannedid
          in: path
          description: TODO
          required: true
          schema:
            $ref: "#/components/schemas/User"
      responses:
        "200":
          description: User unbanned successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
components:
  schemas:
    User:
      title: User
      description: The component that represents the user
      type: integer
      example: 1234 
