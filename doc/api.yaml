openapi: 3.0.0
info:
  title: WASAPhoto
  version: "0.1.0"
  contact:
    name: Alessio Bandiera
    email: bandiera.1985878@studenti.uniroma1.it
    url: https://github.com/ph04
  license:
    name: TODO
  description: |-
    Each user will be presented with a stream of photos in reverse chronological order, with information
    about when it was uploaded (date and time) and how many likes and comments it has. 
    
    Users can place
    (and later remove) a “like” to photos from other users. Also, users can add comments to any photo
    (even those uploaded by themself). Comments can be removed by the author only. Users can ban other users.
    If Alice (user) bans Eve (user), Eve won’t be able to see any information about Alice. Alice can decide to
    remove the ban at any moment.
    
    Users will have their own personal profiles. The personal profile page for
    user detail contains user’s photos (in reverse chronological order), their followers and following, and how many
    photos have been uploaded. Each user can change his/her own username, upload photos,
    remove photos, and follow/unfollow other users. Removal of a photo will also remove likes and comments.

tags:
  - name: "Login"
    description: "Endpoints for the user login"
  - name: "Ban"
    description: "Endpoints for banning users"
  - name: "Follow"
    description: "Endpoints for folllowing users"
  - name: "Photos"
    description: "Endpoints for uploading photos"
  - name: "Like"
    description: "Endpoints for liking photos"
  - name: "Comment"
    description: "Endpoints for commenting photos"
  - name: "User"
    description: "Endpoints for the user profile"
  - name: "Stream"
    description: "Endpoints for the user stream"

paths:
  /session:
    post:
      tags: ["Login"]
      summary: Logs in the user
      description: |-
        If the user does not exist, it will be created.
        If the user exists, it gets returned back.
      operationId: doLogin
      requestBody:
        description: User details
        required: true
        content:
          application/json:
            schema: { $ref: "#/components/schemas/User" }
      responses:
        "201":
          description: User log-in action successful.
          content:
            application/json:
              schema: { $ref: "#/components/schemas/User" }
        "400": { $ref: "#/components/responses/BadRequest" }
        "401": { $ref: "#/components/responses/Unauthorized" }
        "500": { $ref: "#/components/responses/InternalServerError" }
  
  /user/{uid}/ban:
    parameters:
      - { $ref: "#/components/parameters/uid" }
    
    get:
      security:
        - bearerAuth: []
      tags: ["Ban"]
      summary: List of banned users
      description: |-
        Retrieves the list of banned users.
      operationId: getBanList
      responses:
        "200":
          description: Banned users retrieved successfully.
          content:
            application/json:
              schema: { $ref: "#/components/schemas/UserList" }
        "400": { $ref: "#/components/responses/BadRequest" }
        "401": { $ref: "#/components/responses/Unauthorized" }
        "500": { $ref: "#/components/responses/InternalServerError" }
  
  /{uid}/ban/{banneduid}:
    parameters:
      - { $ref: "#/components/parameters/uid" }
      - { $ref: "#/components/parameters/banneduid" }
    
    put:
      security:
        - bearerAuth: []
      tags: ["Ban"]
      summary: Ban a user
      description: |-
        If the user exists, it gets banned.
      operationId: banUser
      responses:
        "200":
          description: User banned successfully.
          content:
            application/json:
              schema: { $ref: "#/components/schemas/User" }
        "400": { $ref: "#/components/responses/BadRequest" }
        "401": { $ref: "#/components/responses/Unauthorized" }
        "500": { $ref: "#/components/responses/InternalServerError" }
      
    delete:
      security:
        - bearerAuth: []
      tags: ["Ban"]
      summary: Unban a user
      description: |-
        If the user exists, it gets unbanned.
      operationId: unbanUser
      responses:
        "204":
          description: User unbanned successfully.
        "400": { $ref: "#/components/responses/BadRequest" }
        "401": { $ref: "#/components/responses/Unauthorized" }
        "500": { $ref: "#/components/responses/InternalServerError" }
  
  /{uid}/follow/{followuid}:
    parameters:
      - { $ref: "#/components/parameters/uid" }
      - { $ref: "#/components/parameters/followuid" }
      
    put:
      security:
        - bearerAuth: []
      tags: ["Follow"]
      summary: Follow a user  
      description: |-
        If the user exists, it gets followed.
      operationId: followUser
      responses:
        "200":
          description: User followed successfully.
          content:
            application/json:
              schema: { $ref: "#/components/schemas/User" }
        "400": { $ref: "#/components/responses/BadRequest" }
        "401": { $ref: "#/components/responses/Unauthorized" }
        "500": { $ref: "#/components/responses/InternalServerError" }
      
    delete:
      security:
        - bearerAuth: []
      tags: ["Follow"]
      summary: Unfollow a user
      description: |-
        If the user exists, it gets unfollowed.
      operationId: unfollowUser
      responses:
        "204":
          description: User unfollowed successfully.
        "400": { $ref: "#/components/responses/BadRequest" }
        "401": { $ref: "#/components/responses/Unauthorized" }
        "500": { $ref: "#/components/responses/InternalServerError" }
  
  /{uid}/followers:
    parameters:
      - { $ref: "#/components/parameters/uid" }
    
    get:
      security:
        - bearerAuth: []
      tags: ["Follow"]
      summary: List of user followers
      description: |-
        Retrieves the list of followed users.
      operationId: getFollowers
      responses:
        "200":
          description: Followed users retrieved successfully.
          content:
            application/json:
              schema: { $ref: "#/components/schemas/UserList" }
        "400": { $ref: "#/components/responses/BadRequest" }
        "401": { $ref: "#/components/responses/Unauthorized" }
        "500": { $ref: "#/components/responses/InternalServerError" }
  
  /{uid}/following:
    parameters:
      - { $ref: "#/components/parameters/uid" }
    
    get:
      security:
        - bearerAuth: []
      tags: ["Follow"]
      summary: List of users followed
      description: |-
        Retrieves the users followed by the client.
      operationId: getFollowing
      responses:
        "200":
          description: Followed users retrieved successfully.
          content:
            application/json:
              schema: { $ref: "#/components/schemas/UserList" }
        "400": { $ref: "#/components/responses/BadRequest" }
        "401": { $ref: "#/components/responses/Unauthorized" }
        "500": { $ref: "#/components/responses/InternalServerError" }
  
  /{uid}/upload:
    parameters:
      - { $ref: "#/components/parameters/uid" }
    
    post:
      security:
        - bearerAuth: []
      tags: ["Photos"]
      summary: Upload a photo
      description: |-
        If the user exists, the given photo gets uploaded on its profile.
      operationId: uploadPhoto
      requestBody:
        description: The photo to be uploaded.
        required: true
        content:
          application/json:
            schema: { $ref: "#/components/schemas/Photo" }
      responses:
        "201":
          description: Photo uploaded successfully.
          content:
            application/json:
              schema: { $ref: "#/components/schemas/Photo" }
        "400": { $ref: "#/components/responses/BadRequest" }
        "401": { $ref: "#/components/responses/Unauthorized" }
        "500": { $ref: "#/components/responses/InternalServerError" }
  
  /{uid}/photos/{photoid}:
    parameters:
      - { $ref: "#/components/parameters/uid" }
      - { $ref: "#/components/parameters/photoid" }
    
    delete:
      security:
        - bearerAuth: []
      tags: ["Photos"]
      summary: Delete a photo
      description: |-
        If both the photo and the user exist, its photo gets removed.
      operationId: deletePhoto
      responses:
        "200":
          description: Photo deleted successfully.
          content:
            application/json:
              schema: { $ref: "#/components/schemas/Photo" }
        "400": { $ref: "#/components/responses/BadRequest" }
        "401": { $ref: "#/components/responses/Unauthorized" }
        "500": { $ref: "#/components/responses/InternalServerError" }
  
  /{uid}/photos/{photoid}/likes:
    parameters:
      - { $ref: "#/components/parameters/uid" }
      - { $ref: "#/components/parameters/photoid" }

    get:
      security:
        - bearerAuth: []
      tags: ["Like"]
      summary: List of photo likes
      description: |-
        Retrieves the list of users who liked the photo.
      operationId: getPhotoLikes
      responses:
        "200":
          description: Photo likes retrieved successfully.
          content:
            application/json:
              schema: { $ref: "#/components/schemas/UserList" }
        "400": { $ref: "#/components/responses/BadRequest" }
        "401": { $ref: "#/components/responses/Unauthorized" }
        "500": { $ref: "#/components/responses/InternalServerError" }

  /{uid}/photos/{photoid}/likes/{likeuid}:
    parameters:
      - { $ref: "#/components/parameters/uid" }
      - { $ref: "#/components/parameters/photoid" }
      - { $ref: "#/components/parameters/likeuid" }
      
    put:
      security:
        - bearerAuth: []
      tags: ["Like"]
      description: |-
        If both the photo and the user exist, it gets liked.
      summary: Like a photo
      operationId: likePhoto
      responses:
        "200":
          description: Photo liked successfully.
          content:
            application/json:
              schema: { $ref: "#/components/schemas/User" }
        "400": { $ref: "#/components/responses/BadRequest" }
        "401": { $ref: "#/components/responses/Unauthorized" }
        "500": { $ref: "#/components/responses/InternalServerError" }
    
    delete:
      security:
        - bearerAuth: []
      tags: ["Like"]
      description: |-
        If both the photo and the user exist, its like gets removed.
      summary: Remove a like from a photo
      operationId: unlikePhoto
      responses:
        "204":
          description: Like removed successfully.
        "400": { $ref: "#/components/responses/BadRequest" }
        "401": { $ref: "#/components/responses/Unauthorized" }
        "500": { $ref: "#/components/responses/InternalServerError" }
  
  /{uid}/photos/{photoid}/comments:
    parameters:
      - { $ref: "#/components/parameters/uid" }
      - { $ref: "#/components/parameters/photoid" }

    get:
      security:
        - bearerAuth: []
      tags: ["Comment"]
      summary: List of photo comments
      description: |-
        Retrieves the list of comments under a photo.
      operationId: getPhotoComments
      responses:
        "200":
          description: Photo comments retrieved successfully.
          content:
            application/json:
              schema: { $ref: "#/components/schemas/CommentList" }
        "400": { $ref: "#/components/responses/BadRequest" }
        "401": { $ref: "#/components/responses/Unauthorized" }
        "500": { $ref: "#/components/responses/InternalServerError" }

  /{uid}/photos/{photoid}/comment:
    parameters:
      - { $ref: "#/components/parameters/uid" }
      - { $ref: "#/components/parameters/photoid" }
      
    post:
      security:
        - bearerAuth: []
      tags: ["Comment"]
      description: |-
        If both the photo and the user exist, the given comment gets posted.
      summary: Comment a photo
      operationId: commentPhoto
      requestBody:
        description: The comment to be posted.
        required: true
        content:
          application/json:
            schema: { $ref: "#/components/schemas/Comment" }
      responses:
        "201":
          description: Comment posted successfully.
          content:
            application/json:
              schema: { $ref: "#/components/schemas/Comment" }
        "400": { $ref: "#/components/responses/BadRequest" }
        "401": { $ref: "#/components/responses/Unauthorized" }
        "500": { $ref: "#/components/responses/InternalServerError" }
  
  /{uid}/photos/{photoid}/comments/{commentid}:
    parameters:
      - { $ref: "#/components/parameters/uid" }
      - { $ref: "#/components/parameters/photoid" }
      - { $ref: "#/components/parameters/commentid" }
    
    delete:
      security:
        - bearerAuth: []
      tags: ["Comment"]
      summary: Remove a comment from a photo
      description: |-
        If the user, the photo and the comment exist, the comment gets removed.
      operationId: uncommentPhoto
      responses:
        "200":
          description: Comment removed successfully.
          content:
            application/json:
              schema: { $ref: "#/components/schemas/Comment" }
        "400": { $ref: "#/components/responses/BadRequest" }
        "401": { $ref: "#/components/responses/Unauthorized" }
        "500": { $ref: "#/components/responses/InternalServerError" }

  /{uid}:
    parameters:
      - { $ref: "#/components/parameters/uid" }
    
    get:
      security:
        - bearerAuth: []
      tags: ["User"]
      summary: Get a user profile information
      description: |-
        If the user exists, returns the user profile.
      operationId: getUserProfile
      responses:
        "200":
          description: The requested user profile information.
          content:
            application/json:
              schema: { $ref: "#/components/schemas/Profile" }
        "400": { $ref: "#/components/responses/BadRequest" }
        "401": { $ref: "#/components/responses/Unauthorized" }
        "500": { $ref: "#/components/responses/InternalServerError" }

  /{uid}/username:
    parameters:
      - { $ref: "#/components/parameters/uid" }
    
    put:
      security:
        - bearerAuth: []
      tags: ["User"]
      summary: Change user username
      description: |-
        If the user exists, it changes its username with the given one.
      operationId: setMyUserName
      requestBody:
        description: The new username of the user.
        required: true
        content:
          application/json:
            schema: { $ref: "#/components/schemas/User" }
      responses:
        "200":
          description: User changed successfully.
          content:
            application/json:
              schema: { $ref: "#/components/schemas/User" }
        "400": { $ref: "#/components/responses/BadRequest" }
        "401": { $ref: "#/components/responses/Unauthorized" }
        "500": { $ref: "#/components/responses/InternalServerError" }

  /{uid}/stream:
    parameters:
      - { $ref: "#/components/parameters/uid" }
    
    get:
      security:
        - bearerAuth: []
      tags: ["Stream"]
      summary: Retrieve the user stream
      description: |-
        If the user exists, it returns its stream.
      operationId: getMyStream
      responses:
        "200":
          description: The user stream.
          content:
            application/json:
              schema: { $ref: "#/components/schemas/Stream" }
        "400": { $ref: "#/components/responses/BadRequest" }
        "401": { $ref: "#/components/responses/Unauthorized" }
        "500": { $ref: "#/components/responses/InternalServerError" }

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
  
  schemas:
    User:
      title: User
      description: The component that represents a user.
      type: object
      properties:
        name:
          type: string
          description: The username of the user.
          pattern: '^.*?$'
          minLength: 3
          maxLength: 16
          example: Mario
    
    Photo:
      title: Photo
      description: The component that represents a photo.
      type: object
      properties:
        user: { $ref: "#/components/schemas/User" }
        id:
          type: integer
          description: The ID of the photo.
          example: 1234
        url:
          type: string
          description: The url of the photo.
          pattern: "https:\\/\\/ph04.github.io\\/WASAPhoto\\/Mario\\/photos\\/\\d+"
          minLength: 32
          maxLength: 100
          example: "https://ph04.github.io/WASAPhoto/Mario/photos/1234"
        date:
          type: string
          description: The date of the publishing of the photo.
          pattern: "^(\\d{4})-(\\d{2})-(\\d{2})T(\\d{2}):(\\d{2}):(\\d{2}(?:\\.\\d*)?)((-(\\d{2}):(\\d{2})|Z)?)$"
          minLength: 20
          maxLength: 30
          example: "2023-11-21T00:28:28Z"
        like_counter:
          type: integer
          description: The amount of likes of the photo.
          minimum: 0
          example: 1000
        comment_counter:
          type: integer
          description: The amount of comments of the photo.
          minimum: 0
          example: 1000
    
    Comment:
      title: Comment
      description: The component that represents a comment.
      type: object
      properties:
        user: { $ref: "#/components/schemas/User" }
        id:
          type: integer
          description: The id of the comment.
          example: 1234
        comment_body:
          type: string
          description: The content of the comment.
          pattern: '^.*?$'
          minLength: 3
          maxLength: 1000
          example: This is a beautiful comment.
  
    Profile:
      title: Profile
      description: The component that represents a user profile
      type: object
      properties:
        user: { $ref: "#/components/schemas/User" }
        photos_counter:
          type: integer
          description: The amount of photos the user has posted.
          minimum: 0
          example: 1000
        followers_counter:
          type: integer
          description: The amount of followers the user has.
          minimum: 0
          example: 1000
        following_counter:
          type: integer
          description: The amount of users the user follows.
          minimum: 0
          example: 1000
  
    Stream:
      title: Stream
      description: The component that represents the user stream.
      type: object
      properties:
        photos:
          type: array
          description: The photos of the user stream.
          items: { $ref: "#/components/schemas/Photo" }
          minItems: 0
          maxItems: 1000
    
    UserList:
      title: UserList
      description: The component that represents a list of users.
      type: object
      properties:
        users:
          type: array
          description: The list of users.
          items: { $ref: "#/components/schemas/User" }
          minItems: 0
          maxItems: 1000
    
    CommentList:
      title: CommentList
      description: The component that represents a list of comments.
      type: object
      properties:
        comments:
          type: array
          description: The list of comments.
          items: { $ref: "#/components/schemas/Comment" }
          minItems: 0
          maxItems: 1000
  
  parameters:
    uid:
      name: uid
      in: path
      description: The parameter that represents the user performing the operation.
      required: true
      schema: { $ref: "#/components/schemas/User" }
    banneduid:
      name: banneduid
      in: path
      description: The parameter that represents the banned user.
      required: true
      schema: { $ref: "#/components/schemas/User" }
    followuid:
      name: followuid
      in: path
      description: The parameter that represents the user to be followed.
      required: true
      schema: { $ref: "#/components/schemas/User" }
    likeuid:
      name: likeuid
      in: path
      description: The parameter that represents the user who liked.
      required: true
      schema: { $ref: "#/components/schemas/User" }
    photoid:
      name: photoid
      in: path
      description: The parameter that represents the photo.
      required: true
      schema: { $ref: "#/components/schemas/Photo" }
    commentid:
      name: commentid
      in: path
      description: The parameter that represents the posted comment.
      required: true
      schema: { $ref: "#/components/schemas/Comment" }
  
  responses:
    BadRequest:
      description: The request was not compliant with the documentation (eg. missing fields, etc).
    Unauthorized:
      description: Access token is missing or invalid.
    InternalServerError:
      description: The server encountered an internal error. Further info in server logs.