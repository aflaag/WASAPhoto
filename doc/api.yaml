openapi: 3.0.0
info:
  title: WASAPhoto
  version: "0.1.0"
  contact:
    name: Alessio Bandiera
    email: bandiera.1985878@studenti.uniroma1.it
    url: https://github.com/ph04
  license:
    name: TODO
  description: |-
    Each user will be presented with a stream of photos in reverse chronological order, with information
    about when it was uploaded (date and time) and how many likes and comments it has. 
    
    Users can place
    (and later remove) a “like” to photos from other users. Also, users can add comments to any photo
    (even those uploaded by themself). Comments can be removed by the author only. Users can ban other users.
    If Alice (user) bans Eve (user), Eve won’t be able tosee any information about Alice. Alice can decide to
    remove the ban at any moment.
    
    Users will have their own personal profiles. The personal profile page for
    user detail contains user’s photos (in reverse chronological order), their followers and following, and how many
    photos have been uploaded. Each user can change his/her own username, upload photos,
    remove photos, and follow/unfollow other users. Removal of a photo will also remove likes and comments.

tags:
  - name: "Login"
    description: "Endpoints for the user login"
  - name: "Ban"
    description: "Endpoints for banning users"
  - name: "Follow"
    description: "Endpoints for folllowing users"
  - name: "Photos"
    description: "Endpoints for uploading photos"
  - name: "Like"
    description: "Endpoints for liking photos"
  - name: "Comment"
    description: "Endpoints for commenting photos"
  - name: "User"
    description: "Endpoints for the user profile"
  - name: "Stream"
    description: "Endpoints for the user stream"

paths:
  /session:
    post:
      tags: ["Login"]
      summary: Logs in the user
      description: |-
        TODO
      operationId: doLogin
      requestBody:
        description: User details
        required: true
        content:
          application/json:
            schema: { $ref: "#/components/schemas/User" }
      responses:
        "201":
          description: User log-in action successful
  
  /user/{uid}/ban:
    parameters:
      - { $ref: "#/components/parameters/uid" }
    
    get:
      security:
        - bearerAuth: []
      tags: ["Ban"]
      summary: List of banned users
      description: |-
        TODO
      operationId: getBanList
      responses:
        "200":
          description: TODO
          content:
            application/json:
              schema: { $ref: "#/components/schemas/UserList" }
  
  /{uid}/ban/{banneduid}:
    parameters:
      - { $ref: "#/components/parameters/uid" }
      - { $ref: "#/components/parameters/banneduid" }
    
    put:
      security:
        - bearerAuth: []
      tags: ["Ban"]
      summary: Ban a user
      description: |-
        TODO
      operationId: banUser
      responses:
        "200":
          description: User banned successfully
      
    delete:
      security:
        - bearerAuth: []
      tags: ["Ban"]
      summary: Unban a user
      description: |-
        TODO
      operationId: unbanUser
      responses:
        "200":
          description: User unbanned successfully
        "400": { $ref: "#/components/responses/BadRequest" }
        "401": { $ref: "#/components/responses/Unauthorized" }
        "500": { $ref: "#/components/responses/InternalServerError" }
  
  /{uid}/follow/{followuid}:
    parameters:
      - { $ref: "#/components/parameters/uid" }
      - { $ref: "#/components/parameters/followuid" }
      
    put:
      security:
        - bearerAuth: []
      tags: ["Follow"]
      summary: Follow a user  
      description: |-
        TODO
      operationId: followUser
      responses:
        "200":
          description: User followed successfully
      
    delete:
      security:
        - bearerAuth: []
      tags: ["Follow"]
      summary: Unfollow a user
      description: |-
        TODO
      operationId: unfollowUser
      responses:
        "200":
          description: User unfollowed successfully
  
  /{uid}/followers:
    parameters:
      - { $ref: "#/components/parameters/uid" }
    
    get:
      security:
        - bearerAuth: []
      tags: ["Follow"]
      summary: List of user followers
      description: |-
        TODO
      operationId: getFollowers
      responses:
        "200":
          description: TODO
          content:
            application/json:
              schema: { $ref: "#/components/schemas/UserList" }
  
  /{uid}/following:
    parameters:
      - { $ref: "#/components/parameters/uid" }
    
    get:
      security:
        - bearerAuth: []
      tags: ["Follow"]
      summary: List of users followed
      description: |-
        TODO
      operationId: getFollowing
      responses:
        "200":
          description: TODO
          content:
            application/json:
              schema: { $ref: "#/components/schemas/UserList" }
  
  /{uid}/upload:
    parameters:
      - { $ref: "#/components/parameters/uid" }
    
    post:
      security:
        - bearerAuth: []
      tags: ["Photos"]
      summary: Upload a photo
      description: |-
        TODO
      operationId: uploadPhoto
      requestBody:
        description: The photo to be uploaded
        required: true
        content:
          application/json:
            schema: { $ref: "#/components/schemas/Photo" }
      responses:
        "201":
          description: Photo uploaded successfully
  
  /{uid}/photos/{photoid}:
    parameters:
      - { $ref: "#/components/parameters/uid" }
      - { $ref: "#/components/parameters/photoid" }
    
    delete:
      security:
        - bearerAuth: []
      tags: ["Photos"]
      summary: Delete a photo
      description: |-
        TODO
      operationId: deletePhoto
      responses:
        "200":
          description: Photo deleted successfully
  
  /{uid}/photos/{photoid}/likes/{likeuid}:
    parameters:
      - { $ref: "#/components/parameters/uid" }
      - { $ref: "#/components/parameters/photoid" }
      - { $ref: "#/components/parameters/likeuid" }
      
    put:
      security:
        - bearerAuth: []
      tags: ["Like"]
      description: |-
        TODO
      summary: Like a photo
      operationId: likePhoto
      responses:
        "200":
          description: Photo liked successfully
    
    delete:
      security:
        - bearerAuth: []
      tags: ["Like"]
      description: |-
        TODO
      summary: Remove a like from a photo
      operationId: unlikePhoto
      responses:
        "200":
          description: Like removed successfully
  
  /{uid}/photos/{photoid}/comment:
    parameters:
      - { $ref: "#/components/parameters/uid" }
      - { $ref: "#/components/parameters/photoid" }
      
    post:
      security:
        - bearerAuth: []
      tags: ["Comment"]
      description: |-
        TODO
      summary: Comment a photo
      operationId: commentPhoto
      requestBody:
        description: The comment to be posted
        required: true
        content:
          application/json:
            schema: { $ref: "#/components/schemas/Comment" }
      responses:
        "200":
          description: Comment posted successfully
  
  /{uid}/photos/{photoid}/comments/{commentid}:
    parameters:
      - { $ref: "#/components/parameters/uid" }
      - { $ref: "#/components/parameters/photoid" }
      - { $ref: "#/components/parameters/commentid" }
    
    delete:
      security:
        - bearerAuth: []
      tags: ["Comment"]
      summary: Remove a comment from a photo
      description: |-
        TODO
      operationId: uncommentPhoto
      responses:
        "200":
          description: Comment removed successfully

  /{uid}:
    parameters:
      - { $ref: "#/components/parameters/uid" }
    
    get:
      security:
        - bearerAuth: []
      tags: ["User"]
      summary: Get a user profile information
      description: |-
        TODO
      operationId: getUserProfile
      responses:
        "200":
          description: The requested user profile information
          content:
            application/json:
              schema: { $ref: "#/components/schemas/Profile" }

  /{uid}/username:
    parameters:
      - { $ref: "#/components/parameters/uid" }
    
    put:
      security:
        - bearerAuth: []
      tags: ["User"]
      summary: Change username
      description: |-
        TODO
      operationId: setMyUserName
      requestBody:
        description: The new username
        required: true
        content:
          application/json:
            schema: { $ref: "#/components/schemas/User" }
      responses:
        "200":
          description: TODO

  /{uid}/stream:
    parameters:
      - { $ref: "#/components/parameters/uid" }
    
    get:
      security:
        - bearerAuth: []
      tags: ["Stream"]
      summary: Retrieve the user stream
      description: |-
        TODO
      operationId: getMyStream
      responses:
        "200":
          description: The user stream
          content:
            application/json:
              schema: { $ref: "#/components/schemas/Stream" }

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
  
  schemas:
    User:
      title: User
      description: The component that represents a user
      type: object
      properties:
        name:
          type: string
          description: TODO
          pattern: 'ˆ.*?$'
          minLength: 3
          maxLength: 16
          example: Mario
    
    Photo:
      title: Photo
      description: The component that represents a photo
      type: object
      properties:
        user: { $ref: "#/components/schemas/User" }
        id:
          type: integer
          description: TODO
          example: 1234
        url:
          type: string
          description: TODO
          pattern: "https:\\/\\/ph04.github.io\\/WASAPhoto\\/Mario\\/photos\\/\\d+"
          minLength: 32
          maxLength: 100
          example: "https://ph04.github.io/WASAPhoto/Mario/photos/1234"
        date:
          type: string
          description: TODO
          pattern: "^(\\d{4})-(\\d{2})-(\\d{2})T(\\d{2}):(\\d{2}):(\\d{2}(?:\\.\\d*)?)((-(\\d{2}):(\\d{2})|Z)?)$"
          minLength: 20
          maxLength: 30
          example: "2023-11-21T00:28:28Z"
        like_counter:
          type: integer
          description: TODO
          minimum: 0
          example: 1000
        comment_counter:
          type: integer
          description: TODO
          minimum: 0
          example: 1000
    
    Comment:
      title: Comment
      description: The component that represents a comment
      type: object
      properties:
        user: { $ref: "#/components/schemas/User" }
        id:
          type: integer
          description: TODO
          example: 1234
        comment_body:
          type: string
          description: TODO
          pattern: 'ˆ.*?$'
          minLength: 3
          maxLength: 1000
          example: TODO
  
    Profile:
      title: Profile
      description: The components that represents a user profile
      type: object
      properties:
        user: { $ref: "#/components/schemas/User" }
        photo_counter:
          type: integer
          description: TODO
          minimum: 0
          example: 1000
        followers_counter:
          type: integer
          description: TODO
          minimum: 0
          example: 1000
        following_counter:
          type: integer
          description: TODO
          minimum: 0
          example: 1000
        photos_counter:
          type: integer
          description: TODO
          minimum: 0
          example: 1000
  
    Stream:
      title: Stream
      description: The components that represents the user stream
      type: object
      properties:
        photos:
          type: array
          description: TODO
          items: { $ref: "#/components/schemas/Photo" }
          minItems: 0
          maxItems: 1000
    
    UserList:
      title: UserList
      description: TODO
      type: object
      properties:
        users:
          type: array
          description: TODO
          items: { $ref: "#/components/schemas/User" }
          minItems: 0
          maxItems: 1000
  
  parameters:
    uid:
      name: uid
      in: path
      description: The parameter that represents the user performing the operation
      required: true
      schema: { $ref: "#/components/schemas/User" }
    banneduid:
      name: banneduid
      in: path
      description: The parameter that represents the banned user
      required: true
      schema: { $ref: "#/components/schemas/User" }
    followuid:
      name: followuid
      in: path
      description: The parameter that represents the user to be followed
      required: true
      schema: { $ref: "#/components/schemas/User" }
    likeuid:
      name: likeuid
      in: path
      description: TODO
      required: true
      schema: { $ref: "#/components/schemas/User" }
    photoid:
      name: photoid
      in: path
      description: The parameter that represents the photo
      required: true
      schema: { $ref: "#/components/schemas/Photo" }
    commentid:
      name: commentid
      in: path
      description: TODO
      required: true
      schema: { $ref: "#/components/schemas/Comment" }
  
  responses:
    BadRequest:
      description: The request was not compliant with the documentation (eg. missing fields, etc).
    Unauthorized:
      description: Access token is missing or invalid
    InternalServerError:
      description: The server encountered an internal error. Further info in server logs.